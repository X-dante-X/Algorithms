@page "/CubicEquation"
@rendermode InteractiveServer

<PageTitle>Cubic Equation Solver</PageTitle>

<div class="container">
    <h3 class="mt-4 text-center">Cubic Equation Solver</h3>

    <div class="row mt-4">
        <div class="col-md-8">
            <div class="input-group mb-3">
                <span class="input-group-text" style="background-color: #FFC107; color: #fff;">Cubic equation:</span>
                <input style="width: 10%;" type="number" class="form-control" placeholder="a" @bind="a" />
                <span class="input-group-text">x<sup>3</sup> +</span>
                <input style="width: 10%;" type="number" class="form-control" placeholder="b" @bind="b" />
                <span class="input-group-text">x<sup>2</sup> +</span>
                <input style="width: 10%;" type="number" class="form-control" placeholder="c" @bind="c" />
                <span class="input-group-text">x +</span>
                <input style="width: 10%;" type="number" class="form-control" placeholder="d" @bind="d" />
                <span class="input-group-text">= 0</span>
            </div>

            <button class="btn btn-primary" @onclick="FindRoots">Find Roots</button>
        </div>

        <div class="col-md-12 mt-4">
            <div class="text-center">
                <p style="font-family: 'Arial', sans-serif; color: #795548;">Roots:</p>
                @if (Roots != null && Roots.Length > 0)
                {
                    @for (int i = 0; i < Roots.Length; i++)
                    {
                        <p style="font-weight: bold; color: #009688;">x@(i + 1) = @Roots[i]</p>
                    }
                }
                else
                {
                    <p>No real roots found.</p>
                }
            </div>
        </div>
    </div>
</div>

@code {
    public double[]? Roots { get; set; }
    public double a;
    public double b;
    public double c;
    public double d;

    public void FindRoots()
    {
        double delta;
        if(a == 0)
        {
            if(b == 0)
            {
                Roots = [-d / c];
                return;
            }
            delta = Math.Pow(b, 2) - 4 * c * d;
            if (delta == 0)
            {
                Roots = new double[] { -c / b };
            }
            else if (delta > 0)
            {
                double root1 = (-b + Math.Sqrt(delta)) / (2 * c);
                double root2 = (-b - Math.Sqrt(delta)) / (2 * c);
                Roots = new double[] { root1, root2 };
            }
            else
            {
                Roots = new double[0];
            }
            return;
        }


        double w = -b / (3 * a);
        double p = (3 * a * Math.Pow(w, 2) + 2 * b * w + c) / a;
        double q = (a * Math.Pow(w, 3) + b * Math.Pow(w, 2) + c * w + d) / a;

        delta = Math.Pow(q, 2) / 4 + Math.Pow(p, 3) / 27;


        if (delta > 0)
        {
            double u = Math.Cbrt(-q / 2 + Math.Sqrt(delta));
            double v = Math.Cbrt(-q / 2 - Math.Sqrt(delta));

            Roots = [u + v + w];
        }
        else if (delta == 0)
        {
            double u = Math.Pow(-q / 2, 1.0 / 3);
            Roots = 
            [
                w - 2 * Math.Cbrt(q / 2),
                w + 2 * Math.Cbrt(q / 2)
            ];
        }
        else
        {
            double f = Math.Acos(3 * q / (2 * p * Math.Sqrt(-p / 3)));
            Roots =
            [
                w + 2 * Math.Sqrt(-p / 3) * Math.Cos(f / 3),
                w + 2 * Math.Sqrt(-p / 3) * Math.Cos(f / 3 + 2 * Math.PI / 3),
                w + 2 * Math.Sqrt(-p / 3) * Math.Cos(f / 3 + 4 * Math.PI / 3)
            ];
        }
    }

}
